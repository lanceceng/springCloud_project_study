<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.attc</groupId>
    <artifactId>service-ribbon</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>service-ribbon</name>
    <description>rest + ribbon消费者</description>

    <parent>
        <groupId>com.attc</groupId>
        <artifactId>parent</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <dependencies>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
        </dependency>

        <!--在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以相互调用（RPC），
        在Spring Cloud可以用RestTemplate+Ribbon和Feign来调用。
        为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证100%可用，
        如果单个服务出现问题，调用这个服务就会出现线程阻塞，
        此时若有大量的请求涌入，Servlet容器的线程资源会被消耗完毕，
        导致服务瘫痪。服务与服务之间的依赖性，故障会传播，
        会对整个微服务系统造成灾难性的严重后果，这就是服务故障的“雪崩”效应。

        Netflix开源了Hystrix组件，实现了断路器模式，SpringCloud对这一组件进行了整合。
        在微服务架构中，一个请求需要调用多个服务是非常常见的，较底层的服务如果出现故障，会导致连锁故障。
        当对特定的服务的调用的不可用达到一个阀值（Hystric 是5秒20次） 断路器将会被打开，
        断路打开后，可用避免连锁故障，fallback方法可以直接返回一个固定值。-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
        </dependency>
    </dependencies>

</project>
